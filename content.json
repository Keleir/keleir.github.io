[{"title":"近期学习计划","date":"2017-06-14T09:30:04.532Z","path":"2017/06/14/key-points/","text":"Language golang tornado Service docker dockerfile docker-compose kubernetes swarm mesos consul ceph REST serviceless Deploy jenkins CI/CD shipyard Reading Docker进阶与实践 Ceph分布式存储实战 GoWeb编程 设计模式之禅 SER: Google运维解密 Google工作整理术","tags":[{"name":"plan","slug":"plan","permalink":"http://keleir.github.io/tags/plan/"},{"name":"point","slug":"point","permalink":"http://keleir.github.io/tags/point/"}]},{"title":"《追风筝的人》读书札记","date":"2016-05-16T06:32:06.000Z","path":"2016/05/16/the-kite-runner-reading-notes/","text":"真正的男人不看诗——真主也禁止他们创作呢。真正的男人——真正的男孩——应该像爸爸小时候那样踢足球去，那才是值得付出热情的玩意儿。 十二岁以前，我大部分时间都在跟哈桑玩耍。有时候回想起来，我的整个童年，似乎就是和哈桑一起度过的某个懒洋洋的悠长夏日，我们在爸爸院子里那些交错的树木中彼此追逐，玩捉迷藏，玩警察与强盗，玩牛仔和印第安人，折磨昆虫——我们拔掉蜜蜂的尖刺，在那可怜的东西身上系根绳子，每当它想展翅飞走，就把它拉回来，这带给我们无与伦比的快乐。 那是个悲伤的小故事，讲的是有个男人发现了一个魔法杯，得知如果他对着杯子哭泣，掉进杯里的眼泪会变成珍珠。可尽管一贫如洗，他却是个快乐的家伙，罕得流泪。于是他想方设法，让自己悲伤，以便那些眼泪会变成他的财富。珍珠越积越多，他越来越贪婪。小说的结尾是，那男人坐在一座珠宝山上，手里提着刀，怀中抱着他深爱着的妻子死于非命的尸体，无助地将眼泪滴进魔法杯。 我朝西望去，觉得真是奇妙，在峰峦那边的某处，喀布尔依然存在。它真的存在，不只是久远的记忆，不只是《旧金山纪事报》第十五版上某篇美联社报道的标题。西方的山脉那边某个地方有座沉睡的城市，我的兔唇弟弟和我曾在那里追过风筝。那边某个地方，我梦中那个蒙着眼的男人死于非命。曾经，在山那边，我作过一个抉择。而如今，时隔四分之一个世纪，正是那个抉择让我重返这片土地。 它只是一个微笑，没有别的了。它没有让所有事情恢复正常。它没有让任何事情恢复正常。只是一个微笑，一件小小的事情，像是树林中的一片叶子，在惊鸟的飞起中晃动着。但我会迎接它，张开双臂。因为每逢春天到来，它总是每次融化一片雪花；而也许我刚刚看到的，正是第一片雪花的融化。","tags":[{"name":"reading","slug":"reading","permalink":"http://keleir.github.io/tags/reading/"},{"name":"books","slug":"books","permalink":"http://keleir.github.io/tags/books/"}]},{"title":"Flask基础简介","date":"2016-04-07T08:51:01.000Z","path":"2016/04/07/flask-learning-notes/","text":"1.Flask Intor12345678910from flask import Flaskapp = Flask(__name__)@app.route('/')def hello_world(): return 'Hello World!'if __name__ == '__main__': app.run() 2.Redirect12345678910from flask import abort, redirect, url_for@app.route('/')def index(): return redirect(url_for('login')) @app.route('/login')def login(): abort(401) this_is_never_executed() 3.Session123456789101112131415161718192021222324252627282930from flask import Flask, session, redirect, url_for, escape, requestapp = Flask(__name__)@app.route('/')def index(): if'username'in session: return 'Logged in as %s' % escape(session['username']) return 'You are not logged in' @app.route('/login', methods=['GET', 'POST'])def login(): if request.method == 'POST': session['username'] = request.form['username'] return redirect(url_for('index')) return ''' &lt;form action=\"\" method=\"post\"&gt; &lt;p&gt;&lt;input type=text name=username&gt; &lt;p&gt;&lt;input type=submit value=Login&gt; &lt;/form&gt; ''' @app.route('/logout')def logout(): # 如果用户名存在，则从会话中移除该用户名 session.pop('username', None) return redirect(url_for('index'))# 设置密钥，保证会话安全app.secret_key = '0Zr98j/3yX R~XHH!jmN]LWX/,?R' 4.Router(1) route装饰器可以使用Flask应用实例的route装饰器将一个URL规则绑定到 一个视图函数上。 例如，下面的示例将URL规则/test绑定到视图函数test()上： 123@app.route('/test')def test(): return'this is response' 在Flask中，转换器/converter用来对从URL中提取的变量进行预处理，这个过程 发生在调用视图函数之前。 Flask预置了四种转换器： string - 匹配不包含/的字符串，这是默认的转换器 path - 匹配包含/的字符串 int - 只有当URL中的变量是整型值时才匹配，并将变量转换为整型 float - 只有当URL中的变量是浮点值时才匹配，并将变量转换为浮点型 (2) add_url_rule()另一种等价的写法是使用Flask应用实例的add_url_rule()方法。下面的示例注册了一个与前例相同的路由： 1234def test(): return 'this is response' app.add_url_rule('/test',view_func=test) 为路由指定请求方法： 123456@app.route('/user',methods=['POST','GET'])def v_users(): if request.method == 'GET': return ... # 返回用户列表 if request.method == 'POST' return ... #创建新用户 Litte Demo:1234567891011121314151617181920212223# -*- coding:utf-8-*-from flask import Flaskapp = Flask(__name__)@app.route('/')def v_index(): return ''' &lt;form action=\"/auth\" method=\"POST\"&gt; &lt;input type=\"text\" name=\"uid\"&gt; &lt;input type=\"password\" name=\"pwd\"&gt; &lt;input type=\"submit\" value=\"submit\"&gt; &lt;/form&gt; ''' @app.route('/auth',methods=['GET', 'POST'])def v_auth(): if request.method == 'GET': return 'GET REQ' if request.method == 'POST': return 'POST REQ' app.run(host='0.0.0.0',port=80) (3) 访问点/endpoint在 Flask框架中，请求任务的分发并不是直接从用户请求的URL一步定位到视图函数， 两者之间隔着一个访问点/endpoint。 在Flask内部使用两张表维护路由： url_map ：维护URL规则和endpoint的映射 view_functions ：维护endpoint和视图函数的映射 以用户访问URL/home为例，Flask将首先利用url_map找到所请求URL对应的 endpoint，即访问点home，然后再利用view_functions表查找home这个访问点 对应的视图函数，最终匹配到函数home()： 123@app.route('/home')def home(): pass (4)静态目录路由当创建应用实例时，Flask将自动添加一条静态目录路由，其访问点 始终被设置为static，URL规则默认被设置为/static，本地路径默认被 设置为应用文件夹下的static子文件夹; 改变默认的本地路径：可以在创建应用对象时使用关键字参数 static_folder 改变 默认的静态文件夹。 例如，你的静态文件都存放在应用下的assets目录下， 那么可以按如下的方式创建应用对象： 1app = Flask(__name__, static_folder='assets') 也可以使用一个绝对路径： 1app =Flask(__name__,static_folder='/var/www/static') 改变默认的本地路径并不会对路由表产生影响。 改变默认的URL规则 ：如果不喜欢静态目录URL/static，也可以在创建应用 对象时使用关键字参数 static_url_path 换一个别的名字。 下面的示例中，将应用下的assets文件夹注册为静态目录/assets： 1app =Flask(__name__,static_folder='assets',static_url_path='/assets') (5) url_for()添加URL变量：如果指定访问点对应的视图函数接收参数，那么关键字参数将生成对应的参数URL。 下面的示例将生成 /contact/Julia?format=html： 123456789@app.route('/')def v_index(): print url_for('v_contact',name='Julia',format='html') return ''@app.route('/contact/&lt;name&gt;')def v_contact(name): pass&lt;/name&gt; 添加锚点 ：使用_anchor关键字可以为生成的URL添加锚点。 下面的示例将生成URL /contact#part2 1234567@app.route('/')def v_index(): print url_for('v_contacts',_anchor='part2') @app.route('/contact')def v_contacts(): pass 外部URL：默认情况下，url_for()生成站内URL，可以设置关键字参数 _external 为True，生成包含站点地址的外部URL。 下面的示例将生成URL http:///contacts: 1234567@app.route('/')def v_index(): print url_for('v_contacts', _external=True) @app.route('/contact')def v_contacts(): pass 5.Request &amp; request form - 记录请求中的表单数据。类型：MultiDict args - 记录请求中的查询参数。类型：MultiDict cookies - 记录请求中的cookie。类型：Dict headers - 记录请求中的报文头。类型：EnvironHeaders method - 记录请求使用的HTTP方法：GET/POST/PUT….。类型：string environ - 记录WSGI服务器转发的环境变量。类型：Dict url - 记录请求的URL地址。类型：string 6.Global Varible(1) g.user在login view方法中我们通过检查 g.user 来判断一个用户是否登录了,为了实现这个我们将使用Flask提供的 before_request 事件。 任何一个被before_request装饰器装饰的方法将会在每次request请求被收到时提前与view方法执行。所以在这儿来设置我们的g.user变量(app/views.py)： 123@app.before_requestdef before_request(): g.user = current_user 这就是它要做的一切，current_user 全局变量是被 Flask-Login 设定的，所以我们只需要把它拷贝到更容易被访问的 g 变量就OK了。 这样，所有的请求都能访问这个登录的用户，甚至于内部的模板。 References 欢迎进入Flask大型教程项目 Flask学习之用户登录","tags":[{"name":"flask","slug":"flask","permalink":"http://keleir.github.io/tags/flask/"},{"name":"route","slug":"route","permalink":"http://keleir.github.io/tags/route/"}]},{"title":"前端知识点汇总","date":"2016-03-04T02:59:01.000Z","path":"2016/03/04/fronted-useful-tips/","text":"1.Bootstrap Modal Draggable12345678$(document).on(\"show.bs.modal\", \".modal\", function()&#123; $(this).draggable(&#123; // handle: \".modal-header\" // 只能点击头部拖动 &#125;); $(this).css(\"overflow\", \"hidden\"); // 防止出现滚动条，出现的话，你会把滚动条一起拖着走的&#125;); show.bs.modal: 在调用 show 方法后触发。1$(\"#identifier\").on('show.bs.modal', function()&#123;//do sth. &#125;); show.bs.modal 当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。1$(\"#identifier\").on('shown.bs.modal', function()&#123;//do sth. &#125;); hide.bs.modal 当调用 hide 方法时触发。1$(\"#identifier\").on('hide.bs.modal', function()&#123;//do sth. &#125;); hidden.bs.modal 当模态框完全对用户隐藏时触发。1$(\"#identifier\").on('hidden.bs.modal', function()&#123;//do sth. &#125;) 需加载jquery-ui.min.js12345678$(document).ready(function()&#123; //为模态对话框添加拖拽 $(\"#modalDialog\").draggable(); //禁止模态对话框的半透明背景滚动 $(\"#myModal\").css(\"overflow\", \"hidden\");&#125;) 2.Location Object Location 对象属性 属性 描述 hash 设置或返回从井号 (#) 开始的 URL（锚）。 host 设置或返回主机名和当前 URL 的端口号。 hostname 设置或返回当前 URL 的主机名。 href 设置或返回完整的 URL。 pathname 设置或返回当前 URL 的路径部分。 port 设置或返回当前 URL 的端口号。 protocol 设置或返回当前 URL 的协议。 search 设置或返回从问号 (?) 开始的 URL（查询部分） 12var searchStr = location.search;location.href = location.pathname + qry; onclick=&quot;javascript:location.href=&apos;/trouble/list&apos;&quot; 3.Select Object (1) 删除全部option： $(&quot;#select&quot;).empty(); (2) 添加一项option： 1$(\"#select_id\").append(\"&lt;option value='value'&gt;text&lt;/option&gt;\"); (3) 创建option对象：opt = new Option(name, value); 123456789101112131415// 产品线与集群二级联动下拉菜单$(\"#proline_select\").change(function() &#123; var cluster_list = $(\"#proline_select\").find(\"option:selected\").attr('tags').split(','); var cluster_select = $(\"#cluster_select\") cluster_select.empty() for(var i=0; i&lt;cluster_list.length; i++) &#123; opt = new Option(cluster_list[i], cluster_list[i]); cluster_select.append(opt); &#125; if ($(\"#proline_select\").val() == 0 || cluster_list == \"\") &#123; cluster_select.empty() var opt = new Option('集群名称', 0); cluster_select.append(opt); &#125;&#125;); (4) option选中与回显：12345678&lt;select class=\"selectpicker form-control\" name=\"mikey\"&gt; &lt;option value=\"\"&gt;请选择监控指标&lt;/option&gt; &#123;% for key in mikey_list %&#125; &lt;option value=\"&#123;&#123; key['mikey'] &#125;&#125;\" &#123;% if mikey == key %&#125; selected = \"selected\" &#123;% endif %&#125;&gt; &#123;&#123; key['mikey'] &#125;&#125;&lt;/option&gt; &#123;% endfor %&#125;&lt;/select&gt; 4.Checkbox Object123&lt;th class=\"text-center\"&gt;&lt;input type=\"checkbox\" id=\"all_alive\" onclick=\"checkAll('all_alive', 'checked')\"&gt;&lt;/th&gt; 12345678910111213141516// Checkbox Function//此函数用于checkbox的全选和反选var checked=false;function check_all(form) &#123; var checkboxes = document.getElementById(form); if (checked == false) &#123; checked = true &#125; else &#123; checked = false &#125; for (var i = 0; i &lt; checkboxes.elements.length; i++) &#123; if (checkboxes.elements[i].type == \"checkbox\") &#123; checkboxes.elements[i].checked = checked; &#125; &#125;&#125; 123456789101112131415function checkAll(id, name)&#123; var checklist = document.getElementsByName(name); if(document.getElementById(id).checked) &#123; for(var i=0;i&lt;checklist.length;i++) &#123; checklist[i].checked = 1; //checklist[i].classList.add(\"info\"); checklist[i].parentNode.parentNode.classList.add(\"info\"); &#125; &#125; else &#123; for(var j=0;j&lt;checklist.length;j++) &#123; checklist[j].checked = 0; checklist[j].parentNode.parentNode.classList.remove(\"info\"); &#125; &#125;&#125; 5.JQuery Cookie(1) jquery-cookie导入1&lt;script type=\"text/javascript\" src=\"js/jquery.cookie.js\"&gt;&lt;/script&gt; (2) 新添加一个会话cookie1$.cookie('the_cookie', 'the_value'); 当没有指明 cookie有效时间时，所创建的cookie有效期默认到用户关闭浏览器为止，所以被称为”会话cookie(session cookie)”. (3) 创建一个cookie并设置有效时间为7天1$.cookie('the_cookie', 'the_value', &#123; expires: 7 &#125;); 当指明了cookie有效时间时，所创建的cookie被称为”持久cookie(persistent cookie)”. (4) 创建一个cookie并设置有效路径1$.cookie('the_cookie', 'the_value', &#123; expires: 7, path: '/' &#125;); 在默认情况下，只有设置cookie的网页才能读取该cookie； 如果想让一个页面读取另一个页面设置的cookie，必须设置cookie的路径； cookie的路径用于设置能够读取cookie的顶级目录； 将这个路径设置为网站的根目录，可以让所有网页都能互相读取cookie； 一般不要这样设置，防止出现冲突； (5) 读取cookie12$.cookie('the_cookie'); // cookie存在 =&gt; 'the_value' $.cookie('not_existing'); // cookie不存在 =&gt; null (6) 删除cookie 通过传递null作为cookie的值即可： 1$.cookie('the_cookie', null); 如果想删除一个带有效路径的cookie，如下： 1$.cookie('cookieName', null, &#123;path:'/'&#125;); 注： jquery-cookie.js的版本要用最新的v1.4.1, v1.3.x会报 URIError: URI malformed； e.g (1)：12345678910111213&lt;script type=\"text/javascript\" &gt; var tabcookievalue = $.cookie(\"mytab\"); if (tabcookievalue != \"\") &#123; nTabs( $(\"#myTab li\").eq(tabcookievalue)[0], tabcookievalue ); &#125; $(\"#myTab li\").click(function () &#123; $.cookie(\"mytab\", $(this).index()); &#125;);&lt;/script&gt; e.g (2)：12345678910111213141516$(document).ready(function() &#123; // Store cookie when click tabs $(\"#equip_ul li\").click(function() &#123; $.cookie(\"equip_tab\", $(this).index(), &#123; expires: 7, raw: true &#125;); &#125;); var tab_index = $.cookie(\"equip_tab\"); if (tab_index != \"\") &#123; $(\"#equip_ul li\").removeClass(\"active\"); $(\"#equip_pane .tab-pane\").removeClass(\"active\"); var tab_li = $(\"#equip_ul li\").eq(tab_index); var panel = $(tab_li).children('a').attr('href'); $(tab_li).addClass(\"active\"); $(panel).addClass(\"active\"); &#125;&#125; 6.Tables(1) word-wrap12345&lt;table style=\"table-layout: fixed;\"&gt; &lt;tr&gt; &lt;td style=\"word-wrap: break-word;\"&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; (2) text-align-last123&lt;td style=\"text-align-last: center;\"&gt;&lt;/td&gt;&lt;td style=\"text-align-last: center;\"&gt;&lt;/td&gt;&lt;td style=\"text-align-last: center;\"&gt;&lt;/td&gt; [REFERENCE] cookie读写插件jquery.cookie.js http://www.layui.com/ Beautiful Flat Icons","tags":[{"name":"jquery","slug":"jquery","permalink":"http://keleir.github.io/tags/jquery/"},{"name":"html","slug":"html","permalink":"http://keleir.github.io/tags/html/"}]},{"title":"Django基础简介","date":"2016-02-28T10:50:25.000Z","path":"2016/02/28/django-learning-notes/","text":"1.Django Intor 官方网站：https://www.djangoproject.com/开源地址：https://github.com/django/django 2.Django Install(1) PIP安装12sudo apt-get install python-pipsudo pip install Django (2)源码安装123456789101112131415161718/usr/local/share/Django/Django-1.8.3.tar.gzDjango-1.8.3├── AUTHORS├── build├── dist├── django├── Django.egg-info├── docs├── extras├── INSTALL├── LICENSE├── MANIFEST.in├── PKG-INFO├── README.rst├── scripts├── setup.cfg├── setup.py└── tests 1sudo python setup.py install 3.Django Project(1)创建项目123456789root@kallen:Django# django-admin startproject MyProjroot@kallen:Django# tree MyProj/MyProj/├── manage.py└── MyProj ├── __init__.py ├── settings.py ├── urls.py └── wsgi.py init.py：Django项目是Python包，这个文件是用来告诉Python这个文件夹当做一个包。在Python术语中，包是一组模块的集合，主要用来把相似的文件分组，防止出现命名冲突。 manage.py：这个脚步用来管理你的项目，你可以把它看做是你项目的的django admin.py版本，其实，manage.py和django-admin.py是共用相同的后台代码。 settings.py： 这是Django项目的主要配置文件，在这个文件里面，你可以具体说明很多选项，包括数据库设置、网页语言、需要turn on的Django功能。 urls.py：这是另外一个配置文件。你可以把它看做是介于URLS和用来处理它们的Python方法之间的匹配; (http://www.cnblogs.com/bluescorpio/archive/2009/11/28/1612805.html) (2)创建应用12345678910111213root@kallen:Django# python manage.py startapp jobs└── MyProj ├── jobs │ ├── admin.py | |—— url.py │ ├── __init__.py │ ├── migrations │ │ └── __init__.py │ ├── models.py │ ├── tests.py │ └── views.py ├── manage.py └── MyProj (3)配置数据库12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'myapp', 'USER': 'root', 'PASSWORD': 'root', 'HOST': '127.0.0.1', 'PORT': '3306' &#125;&#125; (4)创建实体类12345678910from django.db import modelsclass Job(models.Model): pub_date = models.DateField() job_title = models.CharField(max_length=50) job_description = models.TextField() location = models.ForeignKey(Location) def__str__(self): return\"%s (%s)\" % (self.job_title, self.location) (5)查看数据库模式123456789101112131415161718root@kallen# python manage.py sql jobsBEGIN;CREATE TABLE `jobs_location` ( `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY, `city` varchar(50)NOT NULL, `state` varchar(50), `country` varchar(50)NOT NULL);CREATE TABLE `jobs_job` ( `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY, `pub_date` date NOT NULL, `job_title` varchar(50)NOT NULL, `job_description` longtext NOT NULL, `location_id` integerNOT NULL);ALTER TABLE `jobs_job` ADD CONSTRAINT `location_id_refs_id_35f2feb6` FOREIGN KEY (`location_id`) REFERENCES `jobs_location` (`id`);COMMIT; 1234$ python manage.py sql jobsCommandError: App 'jobs' has migrations. Only the sqlmigrate and sqlflush commandscan be used when an app has migrations. 【解决办法】删除jobs下的migrations就可以了； (6)检查数据库模式12345678910111213141516171819202122root@kallen:MyProj# python manage.py validate/usr/local/lib/python2.7/dist-packages/Django-1.8.3-py2.7.egg/django/core/management/commands/validate.py:15: RemovedInDjango19Warning:\"validate\" has been deprecated in favor of\"check\".RemovedInDjango19Warning)System check identified no issues (0 silenced).root@kallen:/home/kallen/Python/Django/MyProj#python manage.py makemigrationsMigrations for 'jobs':0001_initial.py:- Create model Job- Create model Location- Add field location to jobroot@kallen:/home/kallen/Python/Django/MyProj#python manage.py migrateOperations to perform: Synchronize unmigrated apps: staticfiles, messages Apply all migrations: admin, contenttypes, jobs, auth, sessionsSynchronizing apps without migrations: Creating tables... Running deferred SQL... Installing custom SQL...Running migrations: Rendering model states... DONE Applying jobs.0001_initial... OK (7)启动测试服务器123456789root@kallen:/MyProj# python manage.py runserverPerforming system checks...System check identified no issues (0 silenced).You have unapplied migrations; your app may not work properly until they are applied.Run 'python manage.py migrate' to apply them.August 14,2015-05:55:23Django version 1.8.3, using settings 'MyProj.settings'Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C. (8)后台管理12python manage.py createsuperuser # 创建管理帐号python manage.py syncdb (9)注册模型123456789from django.contrib issmport admin# Register your models here.# Register my models of job for mapping # utility class Location &amp; Job.# Kallen Ding, Agu 17 2015from .models import Location, Job admin.site.register(Location)admin.site.register(Job) 4.Django QuerySet(1)条件查询1234567891011121314151617181920条件选取querySet的时候，filter表示=，exclude表示!=。 querySet.distinct() 去重复 __exact 精确等于 like 'aaa'__iexact 精确等于 忽略大小写 ilike 'aaa'__contains 包含 like '%aaa%'__icontains 包含 忽略大小写 ilike '%aaa%'，但是对于sqlite来说，contains的作用效果等同于icontains。 __gt 大于 __gte 大于等于 __lt 小于 __lte 小于等于 __in 存在于一个list范围内 __startswith 以...开头 __istartswith 以...开头 忽略大小写 __endswith 以...结尾 __iendswith 以...结尾，忽略大小写 __range 在...范围内 __year 日期字段的年份 __month 日期字段的月份 __day 日期字段的日 __isnull=True/False (2)查询集排序12Log.objects.filter(user=user.username).order_by('-start_time')Log.objects.filter(user=user.username).order_by('-id') 5.Django Form在html页面，代码超简单，这点django做的不错 1234567891011121314&lt;form id=\"your-profile\" action=\"/contact\" method=\"post\"&gt;&lt;table class=\"form-table\"&gt;&lt;!--&#123;&#123; form.as_ul &#125;&#125;--&gt; # 这是第一种写法，在&lt;ul&gt; 显示表单&lt;!-- &#123;&#123; form.as_p &#125;&#125;--&gt; # 这是第二种写法，在&lt;p&gt; 显示表单&lt;!--&#123;&#123; form.as_table &#125;&#125;--&gt; # 这是第三种写法，在&lt;table&gt;显示表单&#123;% for field in form %&#125; # 这是第四种写法，以循环形式显示表单&#123;&#123; field.label_tag &#125;&#125;:&#123;&#123; field &#125;&#125;&#123;&#123; field.errors &#125;&#125;&#123;% endfor %&#125;&lt;/table&gt;&lt;p class=\"submit\"&gt;&lt;input type=\"submit\" name=\"submit\" id=\"submit\"class=\"button-primary\" value=\"注册信息\"/&gt;&lt;/p&gt;&lt;/form&gt; 6.Django Request(1) request.META一个Python字典，包含了所有本次HTTP请求的Header信息，比如用户IP地址和用户Agent（通常是 浏览器的名称 和 版本号）。 注意，Header信息的完整列表取决于用户所发送的Header信息和服务器端设置的Header信息。 这个字典中几个常见的键值有： HTTP_REFERRER进站前链接网页，如果有的话; HTTP_USER_AGENT用户浏览器的user-agent字符串，如果有的话。例如： “Mozilla/5.0 (X11; U; Linux i686; fr-FR; rv:1.8.1.17) Gecko/20080829 Firefox/2.0.0.17”. REMOTE_ADDR客户端IP，如：”12.345.67.89” 。(如果申请是经过代理服务器的话，那么它可能是以逗号分割的多个IP地址，如：”12.345.67.89,23.456.78.90”) [注意] 因为 request.META 是一个普通的Python字典，因此当你试图访问一个不存在的键时，会触发一个 KeyError异常 （HTTP header信息是由用户的浏览器所提交的、不应该给予信任的”额外”数据，因此你总是应该好好设计你的应用以便当一个特定的Header数据不存在时，给出一个优雅的回应） 你应该用 try/except 语句，或者用Python字典的get() 方法来处理这些“可能不存在的键”： 1234# BAD!def ua_display_bad(request): ua = request.META['HTTP_USER_AGENT']# Might raise KeyError! return HttpResponse(\"Your browser is%s\" % ua) 1234567# GOOD (VERSION 1)def ua_display_good1(request): try: ua = request.META['HTTP_USER_AGENT'] except KeyError: ua ='unknown' return HttpResponse(\"Your browser is%s\" % ua) 1234# GOOD (VERSION 2)def ua_display_good2(request): ua = request.META.get('HTTP_USER_AGENT','unknown') return HttpResponse(\"Your browser is%s\" % ua) 7.Static &amp; Media12345678from django.conf import settingsif settings.DEBUG: urlpatterns += patterns('', url(r'^upload/(?P&lt;path&gt;.*)$', 'django.views.static.serve', &#123;'document_root':settings.MEDIA_ROOT&#125;), ) 8.Migrations在1.6之前, Django只支持添加新的model到数据库, 而无法编辑或修改已经存在的model. Django 1.7 为我们带来了三个新命令: migrate: 用于执行迁移动作 makemigrations: 基于当前的model创建新的迁移策略文件 sqlmigrate: 显示迁移的SQL语句 值得注意的是, migration是基于App的, 因此, 我们可以针对某些app不启用migration功能. migrations 的使用非常简单： 修改model, 比如增加field, 然后运行 1python manager.py makemigrations 你的model会被扫描, 然后与之前的版本作比较, 在app的migrations目录下生成本次迁移文件. 我们建议查看一下该迁移文件, 确保没有问题. 然后运行: 1python manager.py migrate migrate 命令会进行比较, 并应用该迁移. 9.Many to Many(1) 添加对象123a = Author.objects.get(id=1) b = Book.objects.get(id=50) b.authors.add(a) 12b.authors.count()b.authors.all() (2) 删除对象12345a = Author.objects.get(id=1)b = Book.objects.get(id=50)b.authors.remove(a) 或者 b.authors.filter(id=1).delete() 12# 删除全部b.authors.clear() 10.Django FAQ(1) 导入MySQL错误1django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module 【解决办法】安装mysql-python模块 安装步骤：12345sudo apt-get install python-setuptoolssudo apt-get install libmysqld-devsudo apt-get install libmysqlclient-dev sudo apt-get install python-devsudo easy_install mysql-python 测试下： 在python交互式窗口，import MySQLdb 试试，不报错的话，就证明安装好了。 (2) 导入model对象出错123456&gt;&gt;&gt;from jobs.models import Jobdjango.core.exceptions.ImproperlyConfigured: Requested setting DEFAULT_INDEX_TABLESPACE, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings. 【解决办法】12&gt;&gt;&gt;from django.conf import settings &gt;&gt;&gt; settings.configure() (3) CSRF Verification Failed123456789101112Forbidden (403)CSRF verification failed. Request aborted.HelpReason given for failure: CSRF token missing or incorrect.In general, this can occur when there is a genuine Cross Site Request Forgery, or when Django's CSRF mechanism has not been used correctly. For POST forms, you need to ensure:Your browser is accepting cookies.The view function passes a request to the template's render method.In the template, there is a `% csrf_token %` template tag inside each POST form that targets an internal URL.If you are not using CsrfViewMiddleware, then you must use csrf_protect on any views that use the csrf_token template tag, as well as those that accept the POST data.You're seeing the help section of this page because you have DEBUG =Truein your Django settings file. Change that to False, and only the initial error message will be displayed.You can customize this page using the CSRF_FAILURE_VIEW setting. 【解决办法】 第一种：在表单里加上 % csrf_token % 就行了。 第二种：在Settings里的MIDDLEWARE_CLASSES增加配置：12'django.middleware.csrf.CsrfViewMiddleware','django.middleware.csrf.CsrfResponseMiddleware', 方法二不可行： 12ImportError: Module \"django.middleware.csrf\" does not define a\"CsrfResponseMiddleware\" attribute/class 这种方式违反了django的初衷，正确的解决方案有两个： a.引入RequestContext：1234567891011from django.shortcuts import render_to_response, get_object_or_404,from django.template import RequestContext defedit(request,id):publisher =get_object_or_404(Publisher,id=id)if request.method =='POST':appForm =PublisherForm(request.POST, instance = publisher)if appForm.is_valid():publisher = appForm.save();publisher.save()returnHttpResponseRedirect(reverse(\"index\"))returnrender_to_response('books/edit.html', &#123;'form':PublisherForm(instance = publisher)&#125;, context_instance=RequestContext(request)) b.使用render方式渲染页面：12345from django.shortcuts import render_to_response, get_object_or_404, render defedit(request,id):同上 #return render_to_response('books/edit.html', &#123;'form': PublisherForm(instance = publisher)&#125;, context_instance=RequestContext(request)) returnrender(request,'books/edit.html', &#123;'form':PublisherForm(instance = publisher)&#125;) (4) Exception123456Exception happened during processing of request from ('127.0.0.1', 59311)Traceback (most recent call last): File \"/usr/lib/python2.7/SocketServer.py\", line 593, in process_request_threadException happened during processing of request from ('127.0.0.1', 59312)Traceback (most recent call last): File \"/usr/lib/python2.7/SocketServer.py\", line 593, in process_request_thread (5) IPAddressField1234arigue.Server.ipaddr: (fields.W900) IPAddressField has been deprecated.Support forit(except in historical migrations) will be removed in Django 1.9. HINT: Use GenericIPAddressField instead. 推荐使用 GenericIPAddressField() (6) Forbidden12345CSRF verification failed. Request aborted.HelpReason given for failure: CSRF token missing or incorrect. In general, this can occur when there is a genuine Cross Site Request Forgery, or when Django’s CSRF mechanism has not been used correctly. For POST forms, you need to ensure:Your browser is accepting cookies.The view function passes a request to the template’s render method.In the template, there is a % csrf_token % template tag inside each POST form that targets an internal URL.If you are not using CsrfViewMiddleware, then you must use csrf_protect on any views that use the csrf_token template tag, as well as those that accept the POST data.You’re seeing the help section of this page because you have DEBUG = True in your Django settings file. Change that to False, and only the initial error message will be displayed.You can customize this page using the CSRF_FAILURE_VIEW setting. (7) AppRegistryNotReady1django.core.exceptions.AppRegistryNotReady: Models aren't loaded yet. 【参考文章】 stackoverflow.com/questions/6315960","tags":[{"name":"django","slug":"django","permalink":"http://keleir.github.io/tags/django/"}]},{"title":"Memcache简易说明","date":"2016-01-14T15:17:01.000Z","path":"2016/01/14/memcached-brief-usage/","text":"1.安装memcached12yum install memcachedmemcached -h 2.启动memcached1memcached -d -m 100 -c 1000 -u root -p 33060 参数说明：12345678910111213-d 启动一个守护进程-m 分配给Memcache使用的内存数量，单位是MB，默认为64M-u 运行Memcache的用户(only when run as root)-l 监听的服务器IP地址-p Memcache监听的端口,默认为11211，最好是1024以上的端口-c 最大运行的并发连接数，默认是1024，按照服务器的负载量来设定-P 设置保存Memcache的pid文件 3.查看memcached状态(1) telnet ip port ==&gt; stats12345678910111213141516171819202122232425262728293031323334353637383940414243# telnet 127.0.0.1 33060Trying 127.0.0.1...Connected to 127.0.0.1.Escape character is '^]'.statsSTAT pid 7483STAT uptime 62616STAT time 1484028645STAT version 1.4.4STAT pointer_size 64STAT rusage_user 0.913861STAT rusage_system 0.691894STAT curr_connections 12STAT total_connections 16STAT connection_structures 13STAT cmd_get 15STAT cmd_set 5STAT cmd_flush 0STAT get_hits 9STAT get_misses 6STAT delete_misses 0STAT delete_hits 0STAT incr_misses 0STAT incr_hits 0STAT decr_misses 0STAT decr_hits 0STAT cas_misses 0STAT cas_hits 0STAT cas_badval 0STAT auth_cmds 0STAT auth_errors 0STAT bytes_read 5657STAT bytes_written 21447STAT limit_maxbytes 104857600STAT accepting_conns 1STAT listen_disabled_num 0STAT threads 4STAT conn_yields 0STAT bytes 5225STAT curr_items 3STAT total_items 5STAT evictions 0END (2) 模拟top命令1watch \"printf 'stats\\r\\n' | nc 127.0.0.1 33060\" 1watch \"echo stats | nc 127.0.0.1 33060\" 4.Python-memcached API12345678910import memcachemc = memcache.Client(['127.0.0.1:33060'], debug=0)if __name__ == '__main__': mc.set('name', 'kallen') mc.set('mail', 'kallen@mail.com') name = mc.get('name') mail = mc.get('mail') print name, mail 主要方法如下： @set(key, val, time=0, min_compress_len=0) 无条件键值对的设置，其中的time用于设置超时，单位是秒 min_compress_len则用于设置zlib压缩 @set_multi(mapping, time=0, key_prefix=&#39;&#39;, min_compress_len=0) 设置多个键值对，key_prefix是key的前缀，完整的键名是key_prefix+key, 使用方法如下： 123mc.set_multi(&#123;'k1' : 1, 'k2' : 2&#125;, key_prefix='pfx_') mc.get_multi(['k1', 'k2', 'nonexist'], key_prefix='pfx_')&#123;'k1' : 1, 'k2' : 2&#125; @add(key, val, time=0, min_compress_len=0) 添加一个键值对，内部调用_set()方法 @replace(key, val, time=0, min_compress_len=0) 替换value，内部调用_set()方法 @get(key) 根据key去获取value，出错返回None @get_multi(keys, key_prefix=&#39;&#39;) 获取多个key的值，返回的是字典, keys为key的列表 @delete(key, time=0) 删除某个key, time的单位为秒; 用于确保在特定时间内的set和update操作会失败。 如果返回非0则代表成功 @incr(key, delta=1) 自增变量加上delta，默认加1，使用如下 123mc.set(\"counter\", \"20\") mc.incr(\"counter\")21 @decr(key,delta=1) 自减变量减去delta，默认减1 123456789101112131415161718# memcached 初始化mc = memcache.Client(['服务器A IP:11211'], debug=0)class test: def GET(self): sql = \"select * from table\" m = hashlib.md5(sql) key = m.hexdigest() retval = [] if mc.get(key): retval = mc.get(key) else: retval = db.query(sql).list() mc.set(key, retval ) # 断开连接 mc.disconnect_all() [REFERENCE] Memcache Examples Linux下安装memcached Memcached的Client方法介绍 Python-memcached的基本使用 python memcached 邮件列表","tags":[{"name":"memcache","slug":"memcache","permalink":"http://keleir.github.io/tags/memcache/"}]}]